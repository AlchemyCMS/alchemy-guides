h2. Best Practice: How to create Form

This guide covers the configuration setup and create process of a regular contact form:

* Setup Alchemy mailer
* .....

endprologue.


h3. Mailer Settings

This is the default mailer configuration.

<yaml>
mailer:
  page_layout_name: contact
  forward_to_page: false
  mail_success_page: thanks
  mail_from: your.mail@your-domain.com
  mail_to: your.mail@your-domain.com
  fields: [salutation, firstname, lastname, address, zip, city, phone, email, message]
  validate_fields: [lastname, email]
</yaml>


* <code>page_layout_name</code><code>String</code><br>
  (Optional) A Alchemy::PageLayout name. Used for rendering the contact form.
* <code>forward_to_page</code><code>Boolean</code><br>
  (Optional) If set to true the mailer redirects to the page defined with mail_success_page option.
* <code>mail_success_page</code><code>String</code><br>
  (Optional) A page urlname that should be displayed after succesfully sending the mail.
* <code>mail_from</code><code>String</code><br>
  (Optional) The email address the mail is send from.
* <code>mail_to</code><code>String</code><br>
  (Optional) The email address the mail is send to.
* <code>fields</code><code>Array</code><br>
  Field names of your contact form. These fields become attributes on the Message Model
* <code>validate_fields</code><code>Array</code><br>
  Field names of your contact form that should be validated for presence.

INFO: All optional setting should be managable through the content management user. So creating an element that set these values is <strong>highly recommended</strong>.

h3. Creating a contact form element

Describe a new Element with this options inside your <code>elements.yml</code> file:

<yaml>
- name: contactform
   contents:
   - name: mail_from
     type: EssenceText
     validate:
     - presence
     - format: email
   - name: mail_to
     type: EssenceText
     validate:
     - presence
     - format: email
   - name: subject
     type: EssenceText
     validate:
     - presence
   - name: success_page
     type: EssenceSelect
     validate:
     - presence
</yaml>

INFO: The fields <code>mail_to</code>, <code>mail_from</code>, <code>subject</code> and <code>success_page</code> are recommended. The <code>Alchemy::MessagesController</code> uses them to send your mails. That way your customer has full control over these values inside his contact form element.

NOTE: The validations are optional, but <strong>highly recommended</strong>.

Create a page layout for your contact page in the <code>page_layouts.yml</code> file:

<yaml>
- name: contact
  unique: true
  cache: false
  elements: [pageheading, heading, contactform]
  autogenerate: [contactform]
</yaml>

INFO: Disabling the page caching is <strong>highly recommended</strong>!

h4. Example contact form

Use the <code>rails g alchemy:elements --skip</code> generator to create the view files.

h5. The contact form view

Open <code>app/views/alchemy/elements/_contactform_view.html.erb</code> in your text editor.

We are using the great <code>simple_form</code> gem in this example.
If this gem is not already installed, you have to add
<ruby>
  gem 'simple_form'
</ruby>
to your Gemfile and afterwards use <shell>bundle </shell> command to install <code>simple_form</code>.

<erb>
<%= simple_form_for(@message ||= Alchemy::Message.new) do |form| %>
  <%= form.input :firstname %>
  <%= form.input :lastname %>
  <%= form.input :email %>
  <%= form.input :message, :as => :text %>
  <%= form.hidden_field :contact_form_id, :value => element.id %>
  <%= form.button :submit %>
<% end %>
</erb>

NOTE: See the hidden field? This is important, or the messages mailer can't do all the magic for you.

If you use different or additional input symbols like 'company' , 'age' etc. make sure to adapt the fields in the mailer configuration (<code>config/alchemy/config.yml</code>).

INFO: Please have a look at the "simple form documentation":https://github.com/plataformatec/simple_form#readme for further infos about the various config options.

h5. The contact form editor

The <code>app/views/alchemy/elements/_contactform_editor.html.erb</code> file should have this layout:

<erb>
<%= element_editor_for(element) do |el| -%>
  <%= el.edit :mail_from %>
  <%= el.edit :mail_to %>
  <%= el.edit :subject %>
  <%= el.edit :success_page, :select_values => pages_for_select(nil, element.ingredient(:success_page), "Choose page", :urlname) %>
<%- end -%>
</erb>

INFO: The <code>page_selector</code> helper is pretty handy for setting the success page.
Note that the <code>:page_attribute</code> option is important. Leaving it the default <code>:id</code> value breaks the message controller.

h3. Translating validation messages

All validation messages are passed through <code>::I18n.t</code> so you can translate it in your language yml file.

h4. Example Translation

<yaml>
de:
  activemodel:
    attributes:
      alchemy/message:
        firstname: Vorname
        lastname: Nachname
</yaml>

INFO: If you like to use same vocabulary in different context:

e.g in the <code>app/views/alchemy/elements/_contactform_view.html.erb </code>

<erb>
  <%= form.input ... %>
  <%= form.input :firstname , label: t(:sender, scope: 'my_forms.contactform') %>
  <%= form.input ...  %>
</erb>

Your language yml should look like this: (<code>config/locales/de.yml</code>)

<yaml>
my_forms:
  contactform:
    sender: Sender
</yaml>

Now you can reuse the label by using the <code> t</code> function while defining label.
