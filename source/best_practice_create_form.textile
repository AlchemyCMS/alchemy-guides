h2. Best Practice: How to create a form

This guide covers the configuration setup and create process of a regular contact form:

* Setup Alchemy mailer
* Definition of required elements and layout
* Translation support



h3. Conceptual page and content structuring

Imagine visitors got questions about products or services which are presented
on the website. A contact form is common and conveient way to enable visitors to contact you.
Following the "Alchemy approach":alchemy_approach.html you should start with identifying the
required elements.

*We will build the contact form element according to "Contact Template:":http://foundation.zurb.com/page-templates4/contact.html by Foundation Zurb (Â© ZURB, Inc).*

endprologue.

h3. Concept and structure

In contrast to "Best Practice: Create a Blog Template":best_pratice_create_blog_template.html
this guide dispenses with create a new page layout. The next steps focus on the element of an contact form. Feel free to create a custom page layout.
A contact form should provide at least  fields for:

* *name (firstname, lastname)* of the visitor
* *Email*  for response
* *message*: concern of the contact request


h3. Prerequisites

h4. Mailer Settings

First of all make sure, that the Alchemy mailer is correctly set.
If a user submit the the form usually the user receives a confirmation mail and

This is the default mailer configuration. Replace the place holder(<code>your.mail@your-domain.com</code>) with your own Email.

<pre>
mailer:
  page_layout_name: contact
  forward_to_page: false
  mail_success_page: thanks
  mail_from: your.mail@your-domain.com
  mail_to: your.mail@your-domain.com
  fields: [salutation, firstname, lastname, address, zip, city, phone, email, message]
  validate_fields: [lastname, email]
</pre>


* <code>page_layout_name</code><code>String</code><br>
  (Optional) A Alchemy::PageLayout name. Used for rendering the contact form.
* <code>forward_to_page</code><code>Boolean</code><br>
  (Optional) If set to true the mailer redirects to the page defined with mail_success_page option.
* <code>mail_success_page</code><code>String</code><br>
  (Optional) A page urlname that should be displayed after succesfully sending the mail.
* <code>mail_from</code><code>String</code><br>
  (Optional) The email address the mail is send from.
* <code>mail_to</code><code>String</code><br>
  (Optional) The email address the mail is send to.
* <code>fields</code><code>Array</code><br>
  Field names of your contact form. These fields become attributes on the Message Model
* <code>validate_fields</code><code>Array</code><br>
  Field names of your contact form that should be validated for presence.

INFO: All optional setting should be managable through the content management user. So creating an element that set these values is <strong>highly recommended</strong>.

h3. Creating a contact form element

Describe a new Element with this options inside your <code>elements.yml</code> file:
(stored in <code>config/alchemy/</code>)

<pre>
- name: contactform
   contents:
   - name: mail_from
     type: EssenceText
     validate:
     - presence
     - format
     validate_format_as: email
   - name: mail_to
     type: EssenceText
     validate:
     - presence
     - format
     validate_format_as: email
   - name: subject
     type: EssenceText
     validate:
     - presence
   - name: success_page
     type: EssenceSelect
     validate:
     - presence
</pre>

INFO: The fields <code>mail_to</code>, <code>mail_from</code>, <code>subject</code> and <code>success_page</code> are recommended. The <code>Alchemy::MessagesController</code> uses them to send your mails. That way your customer has full control over these values inside his contact form element.

NOTE: The validations are optional, but <strong>highly recommended</strong>.

Define a page layout for your contact page in the <code>page_layouts.yml</code> file:

<pre>
- name: contact
  unique: true
  cache: false
  elements: [pageheading, heading, contactform]
  autogenerate: [contactform]
</pre>

INFO: Disabling the page caching is <strong>highly recommended</strong>!

Afterwards create new file <code>_contact.html.erb</code> in <code>app/views/alchemy/page_layouts/</code> and insert the "raw HTML Code":https://gist.github.com/ghaida/5054646/raw/cd669ee59ce65510c52a5acc39c1f5dbb7b9c925/gistfile1.html from the Contact Template by Foundation Zurb.
Instead of using the sample HTMl, feel free to insert your custom HTML code.

h4. Example contact form

Subsequently run the command
<shell>rails g alchemy:elements --skip</shell>
to generate the (view and editor) partials.

h5. The contact form view

We are using the great <code>simple_form</code> gem in this example.
If this gem is not already installed, you have to add
<pre>
  gem 'simple_form'
</pre>
to your Gemfile and afterwards use <shell>bundle </shell> command to install <code>simple_form</code>.

Open <code>app/views/alchemy/elements/_contactform_view.html.erb</code> in your text editor.
It should look like this:

<pre>
<%= simple_form_for(@message ||= Alchemy::Message.new) do |form| %>
  <%= form.input :firstname %>
  <%= form.input :lastname %>
  <%= form.input :email %>
  <%= form.input :message, :as => :text %>
  <%= form.hidden_field :contact_form_id, :value => element.id %>
  <%= form.button :submit %>
  <%- end -%>
</pre>

The helper <code>simple_form_for()</code> is used to generate the form automatically.

NOTE: See the hidden field? This is important, or the messages mailer can't do all the magic for you.

INFO: Please have a look at the "simple form documentation":https://github.com/plataformatec/simple_form#readme for further infos about the various config options.

h5. The contact form editor

The <code>app/views/alchemy/elements/_contactform_view.html.erb</code> file should have this layout:

<pre>
<%= render_essence_editor_by_name(element, 'mail_from') %>
<%= render_essence_editor_by_name(element, 'mail_to') %>
<%= render_essence_editor_by_name(element, 'subject') %>
<%= page_selector(element, 'success_page', :page_attribute => :urlname) %>
</pre>

INFO: The <code>page_selector</code> helper is pretty handy for setting the success page.
Note that the <code>:page_attribute</code> option is important. Leaving it the default <code>:id</code> value breaks the message controller.

h3. Translating validation messages

All validation messages are passed through <code>::I18n.t</code> so you can translate it in your language yml file.

h4. Example Translation

<pre>
de:
  activemodel:
    attributes:
      alchemy/message:
        firstname: Vorname
        lastname: Nachname
</pre>

*If you like to use same vocabulary in different context:*

e.g in the <code>app/views/alchemy/elements/_contactform_view.html.erb</code>

<pre>
  <%= form.input ... %>
  <%= form.input :firstname , label: t(:sender, scope: 'my_forms.contactform') %>
  <%= form.input ...  %>
</pre>

Your language yml should look like this: (<code>config/locales/de.yml</code>)

<pre>
de:
  activemodel:
    attributes:
      alchemy/message:
        firstname: Vorname
        ...
        ...
my_forms:
  contactform:
    sender: Sender
</pre>

Now you can reuse the label by using the <code>t</code> function while defining
<code>label</code>.


