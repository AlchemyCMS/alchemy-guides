h2. Creating own Elements

Elements are one of the main parts of "Alchemy's content storing technology":architecture.html.
Read more about elements and their role "here":elements.html.

You, as a webdeveloper, has full control over the layout and configuration of each element.

endprologue.

h3. Define elements

Define elements in a <code>config/alchemy/elements.yml</code> file.

Use the scaffold generator to create it:

<shell>
rails g alchemy:scaffold
</shell>

h4. Element settings

* <code>name</code> <code>String</code> <strong>required</strong><br>
  A unique name of the element. This name is used in the <code>page_layouts.yml</code> file and in the <code>app/views/alchemy/elements</code> view partials. The name itself is "translatable":#translations. The format has to be <strong>lowercase</strong> and seperated words has to be <strong>underscored</strong>.
* <code>unique</code> <code>Boolean</code><br>
  (Default: <code>false</code>) Passing <code>true</code> means, that this element can only be placed once on a page.
* <code>contents</code> <code>Array</code><br>
  A collection of contents this element contains. A content has to have a <code>name</code> and a <code>type</code>. See "available essences":essences.html you can use.

See the "element example":#an-example-element for syntax and usage of this options.

h4. Render a picture gallery

Alchemy has a nice picture gallery editor, that makes it easy to manage large picture galleries. It offers a nice drag'n'drop
editor for the user.

In order to use it, you have to enable it on the elements settings.

<code>picture_gallery: true</code>

INFO: The view generator takes care of the rest. If you add the picture gallery editor into an existing element you have to insert <code>render_picture_gallery_editor(element)</code> into your elements editor partial.

NOTE: If you want to limit the amount of pictures a user can add to the gallery use the <code>maximum_amount_of_images</code> option on the <code>render_picture_gallery_editor</code> helper.

h4. Adding contents dynamically

You are able to allow your user to add contents dynamically to the element.

You just have to make contents available for adding them.

h5. Example

<pre>
- name: headline
  contents:
  - name: headline
    type: EssenceText
  available_contents:
  - name: big_text
    type: EssenceRichtext
</pre>

Now an Alchemy user can add the content <code>big_text</code> from the element as much as desired.

NOTE: You have to alter the editor partial of that element, so it automatically renders all dynamically created contents.
Use the <code>render_new_content_link</code> or <code>render_create_content_link</code> to place a button in editor view.

h4. Taggable elements

Elements are taggable. To enable it, add

<code>taggable: true</code>

to the elements settings.

NOTE: The tags are a collection on the <code>element</code> object inside your views. <code>element.tag_list</code> returns an array of tags. <code>tag.name</code> returns the name of a specific tag.

h5. Example

This renders a simple list of tags.

<pre>
<ul>
<% element.tag_list.each do |tag| %>
  <li><%= tag.name %></li>
<% end %>
</ul>
</pre>

h4. Deactivate indexing (Ferret search)

Contents of type EssenceText and EssenceRichtext can be excluded from being indexed by the Ferret search engine.

h5. Example:

<pre>
- name: contactform
  unique: true
  contents:
  - name: mail_to
    type: EssenceText
    do_not_index: true
</pre>

h4. Validations

You can enable validations for your contents. They behave like the Rails model validations.

Supported validations are:

* <code>presence</code> Has the user filled the input field?
* <code>format</code> Has the user used the correct format for the vaule?
* <code>uniqueness</code> Is this value already used in that element?

NOTE: If you want to validate the format you must additionally pass <code>validate_format_as</code> or <code>validate_format_with</code>

* <code>validate_format_with</code> has to be a "regular expression":http://rubular.com.
* <code>validate_format_as</code> can be one of:
** <code>url</code>
** <code>email</code>

h5. Example:

<pre>
- name: person
  contents:
  - name: name
    type: EssenceText
    validate:
    - presence
  - name: email
    type: EssenceText
    validate:
    - format
    validate_format_as: email
  - name: url
    type: EssenceText
    validate:
    - format
    validate_format_with: [a-z0-9]
</pre>

h4. Translations

Element and content names are passed through the I18n library.
So you can translate them in your <code>config/locales</code> language yml file.

h5. Example

<pre>
de:
  alchemy:
    element_names:
      contact: Kontakt
      search: Suche
    content_names:
      headline: Überschrift
</pre>

h4. An example element

Lets create an article element for your website.
The elements get defined in the <code>config/alchemy/elements.yml</code> file.

NOTE: Run <code>rails g alchemy:scaffold</code> to generate the files and folders.

<pre>
- name: article
  unique: true
  contents:
  - name: image
    type: EssencePicture
  - name: headline
    type: EssenceText
    take_me_for_preview: true
  - name: text
    type: EssenceRichtext
</pre>

This element is named gallery. It can be placed just once per page and it has three "contents":elements.html from type <code>EssencePicture</code>, <code>EssenceText</code> and <code>EssenceRichtext</code>.

h3. Assign elements to page layouts

Before you can use elements on pages, you need to define on which page types your element can be placed.
This depends on the page´s page_layout, so open <code>config/alchemy/page_layouts.yml</code> in your favorite text editor and put the name of your new element into the list of available elements for a specific page layout.

<pre>
- name: standard
  elements: [article]
  autogenerate: [article]
</pre>

You can now place the article element on every page which has the page layout named `standard`.
And all in the future created pages that are from standard page layout will automatically generate the article element for you.

h3. Generating the partials

After typing the line below in your terminal, the rails generator will create the elements editor and view files.

<shell>
	rails g alchemy:elements --skip
</shell>

NOTE: You can pass <code>--template-engine</code> or <code>-e</code> as option to use one of <code>haml</code>, <code>slim</code> and <code>erb</code>.
The default is depending on your default template engine in your Rails host app.

The generator will create two files for every element into your <code>app/views/alchemy/elements</code> folder.

One file is named <code>_gallery_view.html.erb</code> and the second file is named <code>_gallery_editor.html.erb</code>.

The generator does not only create files, it also generates the necessary code for you. Mostly you can take use of this generated code and make them nifty by putting some CSS stylings on it.

h3. Customizing the view partial

The Alchemy element generator creates a html layout for you.

It looks like this:

<pre>
<div class="gallery" id="<%= element_dom_id(element) %>"<%= element_preview_code(element) -%>>
  <div class="image">
    <%= render_essence_view_by_name(element, 'image') %>
  </div>
  <div class="headline">
    <%= render_essence_view_by_name(element, 'headline') %>
  </div>
  <div class="text">
    <%= render_essence_view_by_name(element, 'text') %>
  </div>
</div>
</pre>

Pretty useful, but maybe not what you need. No problem, feel free to customize it to fit your needs. It's yours :).

NOTE: Do you see this <code><%= %></code> markup?
This is "ERB":http://en.wikipedia.org/wiki/ERuby.

Alchemy has tons of so called helpers that render content for you.

For further information on the several helpers Alchemy provides please "have a look into the PagesHelper documentation":http://rdoc.info/github/magiclabs/alchemy_cms/Alchemy/PagesHelper.html.

INFO: The view partial of an element is used for all elements of that kind.
If you want to have a different HTML layout for a specific element, create a new one and place it on a specific page layout.
It is common to have lots of element layouts defined that are grouped on several page layouts.

Maybe now is a good time to to learn something about "creating page layouts":create_page_layouts.html.

&nbsp;
