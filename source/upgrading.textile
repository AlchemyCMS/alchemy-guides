h2. Upgrading Alchemy CMS

This guide describes how to upgrade Alchemy CMS from an older Alchemy version.

* Upgrade from prior version
* Update to latest version

endprologue.

Since Alchemy is active maintained and continously enhanced, there will be need to upgrade in order to benefit from
new feature and fixed issues.
<p><strong>In general, no content will be touched or removed when upgrading.
But nonetheless you have to consider some characteristics while upgrading.</strong></p>

The following sections will give you further information for the upgrade process from a specific version to
current version.

h3. Upgrade to latest version

This section assumes that your installed Alchemy App has version <strong>v2.7</strong>. The the latest version (<strong>v3.0</strong>)
requires <strong>Rails 4</strong>.
<p> Please have a look at the explicit instructions mentioned in the appropriate "chapter for the egde version":../edge/upgrading.html .</p>

h3. Upgrade from prior version

h4. Upgrade from version 2.6.x

This section assumes that your installed Alchemy App has version <strong>v2.6</strong> and you like to upgrade to version <strong>v2.7</strong>.

First of all you have to adopt your Gemfile:

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.7-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>

to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

NOTE: It might be necessary to run <code>bundle install</code>.

h5. Additional information

<strong>device-encryptable gem has been removed</strong>

If you're updating a project from version < <strong>v2.5</strong>, please make sure to install <p>the gem <code>devise-encryptable</code>. Add to your Gemfile:</p>
<pre>
gem 'devise-encryptable'
</pre>

<br />

h4. Upgrade from version 2.5 to 2.6

This section assumes that your installed Alchemy App has version <strong>v2.5</strong> .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.6-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

<br />

h4. Upgrade from version 2.4 to 2.5

This section assumes that your installed Alchemy App has version <strong>v2.4</strong> .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.5-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

h5. Additional information

<strong>Authlogic has been replaced by Devise</strong>

We changed the authentication provider from <code>Authlogic</code> to <code>Devise</code>.
<p>Run (in terminal):</p>

<shell>
rails g alchemy:devise
</shell>

And alter the encryptor to <code>authlogic_sha512</code> and the stretches value from 10 to 20:

<pre>
# config/initializers/devise.rb
...
config.stretches = Rails.env.test? ? 1 : 20
config.encryptor = :authlogic_sha512
...
</pre>

Add the encryptable module to your <code>config.yml</code>

<pre>
# config/alchemy/config.yml
devise_modules:
  - :database_authenticatable
  - :trackable
  - :validatable
  - :timeoutable
  - :recoverable
  - :encryptable
</pre>

<strong>Translation via <code>t</code> method:</strong>

If you use the <code>t</code> method to translate alchemy scoped keys, then you have to use the <code>_t</code> method from now on.
The method has been changed, in order to avoid conflicts with the <code>t</code> provided by Rails.

<strong>Standard Set</strong>

If your website is based on the <code>standard-set</code> of Alchemy, make sure to add the gem: <code>alchemy-demo_kit</code> to your
Gemfile.

<br />

h4. Upgrade from version 2.3 to 2.4

This section assumes that your installed Alchemy App has version <strong>v2.3</strong> .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.4-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

h5. Additional information

<strong>Application Layout</strong>

The layout file <code>pages.html.erb</code> has been removed.
Therefore you just have to rename and move the file from <code>app/views/layouts/alchemy/pages.html.erb</code> <br />
to <code>app/views/layouts/application.html.erb</code>.</p>

<strong>DDOS protection while rendering images</strong>

A new DDOS protection for images has been introduced in version <strong>v2.4</strong>.
If you are already using <code>render_essence_view_*</code> helper, nothing has to be changed.
Otherwise, e.g. in case of manually created URLs for images (by JS picture galleries, ...), the security token is required.

If the code look like this (at the moment):

<pre>
<%= link_to alchemy.show_picture_path(:id => content.essence.picture.id, :name => content.essence.picture.urlname, :format => :png), :class => 'zoom', :title => content.essence.caption do %>
  <%= render_essence_view(content, :image_size => "363x397") %>
<% end %>
</pre>

it can be replaced by the following:

<pre>
<%= link_to show_alchemy_picture_path(content.essence.picture, :format => :png), :class => 'zoom', :title => content.essence.caption do %>
  <%= render_essence_view(content, :image_size => "363x397") %>
<% end %>
</pre>

Instead of using the <code>show_alchemy_picture_path</code> helper, you can get the security token with <code>security_token({image_size: '363x397'})</code> from the picture object. Subsequently assign the token to the key <code>sh:</code>.

<strong>Richmedia Essences</strong>

The richmedia essences (video, audio, flash) has been removed from the core and extracted into a seperate gem.
If your project uses some of these essences, add the <code>alchemy-richmedia-essences</code> to your Gemfile.

Usually, if your project does not contain the mentioned types of essences you can remove the correspond tables from the database.

Run the commands:
<shell>
rails g migration remove_alchemy_richmedia_essences
</shell>

Now open the automatically created migration file (<code>db/migrate/timestamp_remove_alchemy_richmedia_essences.rb)</code> and edit to:

<pre>
class RemoveAlchemyRichmediaEssences < ActiveRecord::Migration
  def up
    drop_table :alchemy_essence_audios
    drop_table :alchemy_essence_flashes
    drop_table :alchemy_essence_videos
  end

  def down
    raise IrreversibleMigration
  end
end
</pre>

and finish migration:

<shell>
bundle exec rake db:migrate
</shell>

<strong>SSL obligation</strong>

We strongly recommend you to enable the SSL option for the backend, supposing you've got an SSL certificate.

<br />

h4. Upgrade from version 2.2 to 2.3

This section assumes that your installed Alchemy App has version <strong>v2.2</strong> .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.3-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:
>>>>>>> 47be9df... Updates 'Upgrading' chapter and structural adoptions

<shell>
gem install alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

INFO: If you're updating a project from version < 2.5, please make sure to install the gem <code>devise-encryptable</code>. Add to your Gemfile:
<pre>
gem 'devise-encryptable'
</pre>

Finally, run the following command to finish the upgrade process:

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.6-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

NOTE: The name of the <code>contents</code> attribute depends on the name you set in the <code>seeds.rb</code>.

In the <strong>editor partials</strong> of the affected elements:

Replace (in <code>app/views/elements/_element_name_editor.html.erb</code>):
<pre>
render_picture_editor(element, :maximum_amount_of_images => 1)
</pre>

by

<pre>
render_essence_editor_by_name(element, 'image')
</pre>

NOTE: The name of the essences may be different according to your choice in <code>db/seeds.rb</code>.

Please ensure that <strong>the task <code>rake db:seed</code> will be executed on the server too</strong>.
Therefore add this task to <code>deploy.rb</code>.

<br />

h4. Upgrade from version 2.1 to 2.2

This section assumes that your installed Alchemy App has version <strong>v2.1</strong> .

This Alchemy version uses <strong>Rails 3.2</strong>.
Adopt your <code>Gemfile</code> in order to prepare for the update:

<pre>
source 'http://rubygems.org'

gem 'rails', '~> 3.2.13'
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.2-stable'
gem 'mysql2'

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails', " ~> 3.2.3"
  gem 'coffee-rails', " ~> 3.2.1"
  gem 'uglifier', '>= 1.0.3'
  gem 'quiet_assets'
  gem 'turbo-sprockets-rails3'
end

group :development do
  gem 'capistrano'
  gem 'thin'
end
</pre>

Run in terminal:

<shell>
bundle exec rake alchemy:upgrade
</shell>

h3. Upgrade from version 2.4 to 2.5

This section assumes that your installed Alchemy App has version 2.4 .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.5-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

h4. Additional information

<strong>Authlogic has been replaced by Devise</strong>

We changed the authentication provider from <code>Authlogic</code> to <code>Devise</code>.
<p>Run (in terminal):</p>

<shell>
rails g alchemy:devise
</shell>

And alter the encryptor to authlogic_sha512 and the stretches value from 10 to 20:

<pre>
# config/initializers/devise.rb
...
config.stretches = Rails.env.test? ? 1 : 20
config.encryptor = :authlogic_sha512
...
</pre>

Add the encryptable module to your <code>config.yml</code>

<pre>
# config/alchemy/config.yml
devise_modules:
  - :database_authenticatable
  - :trackable
  - :validatable
  - :timeoutable
  - :recoverable
  - :encryptable
</pre>

<strong>Translation via <code>t</code> method:</strong>

If you use the <code>t</code> method to translate alchemy scoped keys, then you have to use the <code>_t</code> method from now on.
The method has been changed, in order to avoid conflicts with the <code>t</code> provided by Rails.

<strong>Standard Set</strong>

If your website is based on the <code>standard-set</code> of Alchemy, make sure to add the gem: <code>alchemy-demo_kit</code> to your
Gemfile.

h3. Upgrade from version 2.3 to 2.4

This section assumes that your installed Alchemy App has version 2.3 .

<pre>
...
gem 'alchemy_cms', :github => 'magiclabs/alchemy_cms', :branch => '2.6-stable'
...
</pre>

Run in terminal:

<shell>
bundle update alchemy_cms
</shell>
to update Alchemy by using the recent version defined in the <code>Gemfile</code>.

Finally, run the following command to finish the upgrade process:

<shell>
bundle exec rake alchemy:upgrade
</shell>

h4. Additional information

<strong>Application Layout</strong>

The layout file <code>pages.html.erb</code> has been removed.
Therefore you just have to rename and move the file from <code>app/views/layouts/alchemy/pages.html.erb</code>
<p>to
<code>app/views/layouts/application.html.erb</code>.</p>

<strong>DDOS protection while rendering images</strong>

A new DDOS protection for images has been introduced in version 2.4.
If you are already using <code>render_essence_view_*</code> helper, nothing has to be changed.
Otherwise, e.g. in case of manually created URLs for images (by JS picture galleries, ...), the security token is required.

If the code look like this (at the moment):

<pre>
<%= link_to alchemy.show_picture_path(:id => content.essence.picture.id, :name => content.essence.picture.urlname, :format => :png), :class => 'zoom', :title => content.essence.caption do %>
  <%= render_essence_view(content, :image_size => "363x397") %>
<% end %>
</pre>

it can be replaced by the following:

<pre>
<%= link_to show_alchemy_picture_path(content.essence.picture, :format => :png), :class => 'zoom', :title => content.essence.caption do %>
  <%= render_essence_view(content, :image_size => "363x397") %>
<% end %>
</pre>

Instead of using the <code>show_alchemy_picture_path</code>helper, you can get the security token with <code>security_token({image_size: '363x397'})</code> from the picture object. Assign the token to the key <code>sh:</code>.

<strong>Richmedia Essences</strong>

The richmedia essences(video, audio, flash) has been removed from the core and extracted into a seperate gem.
If you project uses some of these essences, add the <code>alchemy-richmedia-essences</code> to your Gemfile.

Usually, if your project does not contain the mentioned types of esssences you can remove the correspond tables from the database.

Run the commands:
<shell>
rails g migration remove_alchemy_richmedia_essences
</shell>

The migration file, may look like this:

<pre>
class RemoveAlchemyRichmediaEssences < ActiveRecord::Migration
  def up
    drop_table :alchemy_essence_audios
    drop_table :alchemy_essence_flashes
    drop_table :alchemy_essence_videos
  end

  def down
    raise IrreversibleMigration
  end
end
</pre>

and finish migration:

<shell>
bundle exec rake db:migrate
</shell>

<strong>SSL obligation</strong>

We recommend you to enable the SSL option for the backend, supposing you've got an SSL certificate.

h3. F.A.Q.

<p><strong>GemNotFound</strong></p>
If you encounter the error <code>GemNotFound: Could not find....</code>, please make sure that all required gems are installed.
<p>Run</p>
<shell>bundle install</shell>
to install missing gems.





&nbsp;
