h2. Elements

An element is mostly a set of contents that belong together, visually and contextually.

Imagine you bundle a headline, a text block and a picture - that is a typical article element.

The element's contents are also called "essences":essences.html and belong to certain essence types. Each essence type represents a data type that can be stored in a database.

Each element has two related view partials. One which renders the essences on your website, the other which renders form fields in the admin frontend for the editor. "These partials can be generated automatically":#generating-the-partials.

endprologue.

h3. Defining elements

Elements get defined in the <code>config/alchemy/elements.yml</code> file.

If this file does not exist yet, use the following scaffold generator to do that now:

<shell>
rails g alchemy:scaffold
</shell>

INFO: The generator also creates all the other basic folders and files for setting up your website with Alchemy.

NOTE: <strong>The element definitions are being cached. Please restart the server after editing the elements.yml.</strong>

h4. Example of an element definition

<yaml>
# config/alchemy/elements.yml
- name: article
    unique: true
    contents:
    - name: image
      type: EssencePicture
    - name: headline
      type: EssenceText
      take_me_for_preview: true
    - name: copy
      type: EssenceRichtext
</yaml>

The element in this example is named <em>article</em> and can be placed only once per page. It has three contents of the following types: <code>EssencePicture</code>, <code>EssenceText</code> and <code>EssenceRichtext</code>. The "headline" content is used for the preview text in the element's title bar in the admin frontend.

h4. Element settings

The following settings can be used to define elements in the <code>elements.yml</code>.

* <strong>name</strong> <code>String</code> (<em>required</em>)<br>
  A lowercased unique name of the element. Separated words needs to be underscored. The name is used in the <code>page_layouts.yml</code> file to define on which pages the element can be used. It is also part of the <code>app/views/alchemy/elements</code> view partials file names. The name is "translatable":#translations for the user in the admin frontend.
* <strong>unique</strong> <code>Boolean</code><br>
  (Default: <code>false</code>) Passing <code>true</code> means this element can be placed only once on a page.
* <strong>hint</strong> <code>String</code><br>
  A hint for the user in the admin frontend that describes what the element is used for. The hint is "translatable":#translations if you provide an I18n translation key instead of a complete sentence.
* <strong>available_contents</strong> <code>Array</code><br>
  A collection of contents that can be added to the element dynamically by the user in the admin frontend.
* <strong>taggable</strong> <code>Boolean</code><br>
  Enables the element to be taggable by the user in the admin frontend.
* <strong>picture_gallery</strong> <code>Boolean</code><br>
  Enables a picture gallery editor for the element.
* <strong>contents</strong> <code>Array</code><br>
  A collection of contents the element contains. A content has to have a <code>name</code> (unique per element) and a <code>type</code>. Take a look at the "essences guide":essences.html to get more informations about the available essence types.

In the following examples you will see how to use these settings. In the code examples of the partials we use the "slim template engine":http://slim-lang.com instead of "ERB":http://en.wikipedia.org/wiki/ERuby to keep the markup short and easy to understand.

h4. Element with picture gallery

Alchemy provides a nice picture gallery editor. It allows to manage large picture galleries very easy by dragging the pictures around.

In order to use it, you just need to enable the setting in the <code>elements.yml</code> file.

<yaml>
- name: picture_gallery
  picture_gallery: true
</yaml>

After "generating the elements view partials":#generating-the-partials you will receive the view and the editor partial.

h5. The editor partial for the element

This partial holds the code for rendering the gallery editor in the admin frontend.

<erb>
# app/views/alchemy/elements/_picture_gallery_editor.html.slim
= element_editor_for(element) do |el|
  = render_picture_gallery_editor(element, max_images: nil, crop: true)
</erb>

You can pass optional settings to the <code>render_picture_gallery_editor</code> helper:

<ruby>
max_images: 10
image_size: "346x246"
crop: true
fixed_ratio: true
format: 'png'
</ruby>

INFO: <code>max_images</code> option limits the amount of pictures a user can add to the gallery.<br><code>crop</code> enables the image cropping feature for the user.

h5. The view partial for the element

The view partial gets rendered on your website.

<erb>
= element_view_for(element, :id => 'gallery') do |el|
  - element.contents.gallery_pictures.each do |image|
    = render_essence_view(image, :image_size => "346x246", :crop => true)
</erb>

Alternatively, if you want to customize the way the gallery pictures are rendered, you can create the plain image tag by yourself and use the <code>Alchemy::Picture</code> url helper:

<erb>
<%= image_tag show_alchemy_picture_url(image.essence.picture, :size => "102x73", :format => "png") %>
</erb>

h4. Element with addable contents

You are able to allow your users to add contents dynamically to the element.

You just need to define available contents in the <code>elements.yml</code>.
If you also want to allow the users to delete these contents you can also define that.

h5. Example of element definition with available contents

<yaml>
- name: article
  contents:
  - name: headline
    type: EssenceText
  available_contents:
  - name: text
    type: EssenceRichtext
    settings:
      deletable: true
</yaml>

Additionally you need to alter the editor partial of that element for rendering the dynamically created contents. You just need to iterate through them and use the following helper methods.

h5. Example of editor partial using the available contents feature

<erb>
- element.all_contents_by_name('text').each do |content|
  = label_and_remove_link(content)
  = render_essence_editor(content)
p = render_create_content_link(element, 'text', :label => _t('add_text'))
</erb>

As shown in the example, we used the <code>label_and_remove_link</code> helper. It renders a label with the content's name and a small button to delete it.

We also used the <code>render_create_content_link</code> helper. It renders a button to create certain contents instantly.

Now an Alchemy user can add the content <code>text</code> from the element as much as desired and is able to delete them again.

INFO: If you have more than one available content, you can use the <code>render_new_content_link</code> helper instead. It will provide a button that opens an overlay with a selectbox holding all available contents.

h4. Element with tags

Elements are taggable. To enable it, add <code>taggable: true</code> to the element's definition.

<yaml>
- name: article
  taggable: true
  contents:
    - name: image
      type: EssencePicture
    - name: headline
      type: EssenceText
      take_me_for_preview: true
    - name: copy
      type: EssenceRichtext
</yaml>

Tags are a collection on the <code>element</code> object. <code>element.tag_list</code> returns an array of tag names.

<erb>
= element.tag_list.join(', ')
</erb>

Alchemy uses the "acts-as-taggable-on":https://github.com/mbleigh/acts-as-taggable-on gem, so please refer to the github "readme":https://github.com/mbleigh/acts-as-taggable-on/blob/master/README.md or the "wiki":https://github.com/mbleigh/acts-as-taggable-on/wiki for further informations.

h4. Element with content validations

You can enable validations for your contents. They behave like the Rails model validations.

INFO: Supported validations are: <code>presence</code>, <code>uniqueness</code>, <code>format</code>

format needs to come with a "regular expression":http://rubular.com or a predefined matcher string as its value.
There are already predefined format matchers listed in the <code>config/alchemy/config.yml</code> file.
It is also possible to add own format matchers there.

h5. Example of format matchers

<yaml>
# config/alchemy/config.yml
format_matchers:
  email: !ruby/regexp '/\A[^@\s]+@([^@\s]+\.)+[^@\s]+\z/'
  url:   !ruby/regexp '/\A[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?\z/ix'
</yaml>

h5. Example of an element definition with essence validations:

<yaml>
- name: person
  contents:
  - name: name
    type: EssenceText
    validate: [presence]
  - name: email
    type: EssenceText
    validate: [format: 'email']
  - name: homepage
    type: EssenceText
    validate: [format: !ruby/regexp '/^[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/']
</yaml>

The email content is being validated against the predefined 'email' matcher in the config.yml. The homepage content is matched against the given regexp.

h5. Example of an element definition with chained validations.

<yaml>
- name: person
  contents:
  - name: name
    type: EssenceText
    validate: [presence, uniqueness, format: 'name']
</yaml>

The validations are evaluated in the order as they are defined in the list. At first the name content will be validated for presence, then for uniqueness and at least against its format.

h3. Assign elements to page layouts

Before you can use elements on pages, you need to define on which page layouts your element can be placed.
So open <code>config/alchemy/page_layouts.yml</code> in your text editor and put the name of your new element into the list of available elements for a specific page layout.

<yaml>
- name: standard
  elements: [article]
  autogenerate: [article]
</yaml>

You can now place the article element on each page with page layout `standard`.
All future created pages with page layout `standard` will automatically create the article element for you.

h3. Generating the partials

After typing the line below in your terminal, the rails generator will create the elements editor and view files.

<shell>
  rails g alchemy:elements --skip
</shell>

INFO: You can pass <code>--template-engine</code> or <code>-e</code> as an argument to use <code>haml</code>, <code>slim</code> or <code>erb</code>.
The default template engine depends on your settings in your Rails host app.

The generator will create two files for each element in your <code>app/views/alchemy/elements</code> folder.

According to the first example, the article element, the generator will create the <code>_article_view.html.erb</code> and <code>_article_editor.html.erb</code> files.

# The element's view file <code>_article_view.html.erb</code> gets rendered, when a user requests your webpage.
# The element's editor file <code>_article_editor.html.erb</code> gets rendered, when you edit the page in the admin frontend.

The generator does not only create these files, it also generates the necessary code for you. Mostly you can take use of the that code and make it nifty by adding some CSS stylings.

h3. Render elements on a page layout

Now that the above 'article' element example is associated with the 'standard' page layout, the element can be rendered on that layout <code>app/views/alchemy/page_layouts/_standard.html.erb</code>.

<erb>
...

<!-- Main Page Content -->
<div class="row">

  <!-- Main article Content -->
  <div class="large-9 columns" role="content">
    <%= render_elements only: 'article' %>
  </div>

...
</erb>

h3. Customizing the view partial

The Alchemy element generator creates the basic html markup for you.

Pretty useful, but maybe not what you need, sometimes. No problem, feel free to customize it. It's yours :).

This is the newer notation for rendering the element's partial:

<erb>
<%= element_view_for(element) do |el| %>
  <h3><%= el.render :headline %></h3>
  <div class="row">
    <div class="large-6 columns">
      <p>
        <%= el.render :image %>
      </p>
    </div>
    <div class="large-6 columns">
      <p>
        <%= el.render :text %>
      </p>
    </div>
  </div>
<% end %>
</erb>

In some cases you want to use the older style. You can also or mix both. Take a look at this example, its the same html output as the above example:

<erb>
<div class="article" id="<%= element_dom_id(element) %>"<%= element_preview_code(element) -%>>
  <h3><%= render_essence_view_by_name(element, 'headline') %></h3>
  <div class="row">
    <div class="large-6 columns">
      <p>
        <%= render_essence_view_by_name(element, 'image') %>
      </p>
    </div>
    <div class="large-6 columns">
      <p>
        <%= render_essence_view_by_name(element, 'text') %>
      </p>
    </div>
  </div>
</div>
</erb>


The <code>element_view_for</code> helper wraps the inner html code into a <code>div</code> element by default. You can pass arguments to the helper to change its rendering behavior:

The second argument <code>tag</code> is used for the wrapping html tag. Passing <code>false</code> to it means no wrapping at all. Passing the name of any html element to it means the inner html gets wrapped within the given html tag instead of the default <code>div</code>.

You can pass additional arguments to add or change any html attributes of the wrapper.

<erb>
<%= element_view_for(element, tag: 'li', class: 'red', id: 'my_unique_id') do |el| %>
  ...
<% end %>
</erb>

NOTE: If you want to learn more about the helper methods used in these partials, please have a look at the "Documentation":http://rubydoc.info/search/github/magiclabs/alchemy_cms?q=helper.

INFO: The view partial of an element is used for all elements of that kind.
If you want to have different HTML for one element, define a new one and place it on a specific page layout.
It is common to have lots of elements defined that are grouped on several page layouts.

h3. Translations

Element and content names are passed through the I18n library.
You can translate them in your <code>config/locales</code> language yml file.

<yaml>
de:
  alchemy:
    element_names:
      contact_form: Kontaktformular
      search: Suche
    content_names:
      headline: Überschrift
</yaml>

Content names can also be translated related to their element.
This is useful for contents with the same name that should have different translations.

<yaml>
de:
  alchemy:
    element_names:
      contact_form: Kontaktformular
    content_names:
      color: Farbe
      contact_form:
        color: Button Farbe
</yaml>

&nbsp;
