h2. Creating custom Modules

Basicly there are two ways to set up a module:

* Use Alchemy as your Rails admin backend
* Create a new Engine

endprologue.



h3. Using Alchemy as your Rails admin backend

Hence every module is a subsection of a Rails application or a gem you can roll out your own admin backend if you like.

By using Alchemy's backend interface you get a whole bunch of things:

  # Authentication and Authorization
  # A highly and fine grained customizable resource manager (CRUD interface)
  # A nicely styled user interface

And it's easy as this:

<pre>
module Admin
  class YourResourcesController < Alchemy::Admin::ResourcesController
  end
end
</pre>

You can overwrite the default controller actions and views as you like.
An instance-variable named after the resource (i.e. <code>@your_resource</code> for <code>YourResource</code>) is defined for use in your views.

After you setting up your routes you have to take care for control access:

h3. Authorization

Rights and roles are set in <code>config/authorization_rules.rb</code>.
Just create the file if it doesn't exist already.

<pre>
# config/authorization_rules.rb
authorization do

  role :admin do
    has_permission_on :admin_your_resource, :to => [:manage]
  end

end
</pre>

More information about authorization can be found in the docs of the <code>declarative_authorization</code> gem ("https://github.com/stffn/declarative_authorization":https://github.com/stffn/declarative_authorization)

h3. Mounting

h4. For an engine:

<pre>
# config/routes.rb
YourApp::Application.routes.draw do
  ...
  mount YourAlchemyModule::Engine => '/'
  mount Alchemy::Engine => '/'
end
</pre>

h4. For your apps resources:

<pre>
# config/routes.rb
YourApp::Application.routes.draw do

  resources :your_resource

  namespace :admin do
    resources :your_resource
  end

  mount Alchemy::Engine => '/'
end
</pre>

Notice: Due to alchemy's strong routes it is recommenend to mount your engine before mounting alchemy.

h3. Registering the module

Last but not least the module needs to be registered to Alchemy CMS.

h4. When using your host app:

<pre>
# my_host_app/config/initializers/alchemy.rb
Alchemy::Modules.register_module({
  name: 'your_module',
  order: 1,
  navigation: {
    name: 'Products',                   # The name in the main navigation (translated via I18n)
    controller: '/admin/products',      # The controller which will be used.
    action: 'index',                    # The action which will be used
    image: '/assets/module_icon.png',   # image which will be rendered as navigation icon
    sub_navigation: [
      {
        name: 'Products',               # The name for the subnavigation tab (translated via I18n)
        controller: '/admin/products',  # controller which will be used
        action: 'index'                 # action which will be used
      },
      {
        name: 'Variants',               # The name for the subnavigation tab (translated via I18n)
        controller: '/admin/variants',  # controller which will be used
        action: 'index'                 # action which will be used
      }
    ]
  }
})
</pre>

h4. Using a Rails engine:

<pre>
# my_engine/config/initializers/alchemy.rb
Alchemy::Modules.register_module({
  name: 'your_module',
  engine_name: 'your_engine_name'
  order: 1,
  navigation: {
    name: 'Products',                             # The name in the main navigation (translated via I18n)
    controller: '/admin/products',                # The controller which will be used.
    action: 'index',                              # The action which will be used
    image: '/assets/module_icon.png',             # image which will be rendered as navigation icon
    sub_navigation: [
      {
        name: 'Products',                         # The name for the subnavigation tab (translated via I18n)
        controller: 'your_module/admin/products', # controller which will be used
        action: 'index'                           # action which will be used
      },
      {
        name: 'Variants',                         # The name for the subnavigation tab (translated via I18n)
        controller: 'your_module/admin/variants', # controller which will be used
        action: 'index'                           # action which will be used
      }
    ]
  }
})

# Loading authorization rules and register them to auth engine instance
Alchemy::AuthEngine.get_instance.load(File.join(File.dirname(__FILE__), 'authorization_rules.rb'))
</pre>

h3. Get Ready!

Restart, point your browser to <code>localhost:3000/admin/your_resources</code>!


&nbsp;
