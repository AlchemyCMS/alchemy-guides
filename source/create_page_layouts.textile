h2. Creating own page layouts

Every website has pages that serve certain needs. Contactform pages, intro pages, and standard content pages.

In Alchemy pages has a page layout that have certain settings and define the collections of available elements a user can place on that page.

In this guide you will learn how to define a page layout.

endprologue.


h3. Defining page layouts

In order to create page layouts you have to edit the file <code>config/alchemy/page_layouts.yml</code>.

INFO: Generate Alchemy's files and folders with <code>rails g alchemy:scaffold</code>

h4. Configuration options

Every page layout needs at least a name. You don't need to set every option. It depends on what you need for pages with that layout type.

h5. Recommended options

* <code>name:</code> <code>[String]</code><br>
  The name of the layout used for views and inside the database. You can render a layout with the <code>render_page_layout(name)</code> helper.
* <code>elements:</code> <code>[Array]</code><br>
  A list of element names that can be placed on this layout i.e. <code>[text, picture]</code>.<br>
  "Elements":create_elements.html are defined inside the <code>elements.yml</code> file.
* <code>autogenerate:</code> <code>[Array]</code><br>
  A list of element names that are autogenerated after creating a Page of that type.
* <code>unique:</code> <code>[Boolean]</code><br>
  (Default false) Pass <code>true</code> and the user can only choose this layout once inside a language tree.
* <code>cache:</code> <code>[Boolean]</code><br>
  (Default true) Pass <code>false</code> to disable the caching for this kind of pages. <strong>Recommended for contact forms</strong> and such likes.

h5. Additional/advanced options

* <code>layoutpage:</code> <code>[Boolean]</code><br>
  Layout pages (or global pages) are outside the normal page tree and can be used to place "global" Elements like footers and sidebars.
* <code>hide:</code> <code>[Boolean]</code><br>
  Pass true to hide this layout from the user.
* <code>searchresults:</code> <code>[Boolean]</code><br>
  Pass true to use this type of page for rendering the search results of the build in fulltext search.
* <code>feed:</code> <code>[Boolean]</code><br>
  Pass true to enable a RSS feed of news elements from this page.
* <code>redirects_to_external:</code> <code>[Boolean]</code><br>
  Pass true to disable normal page rendering and redirect to a external page instead.
* <code>controller:</code> <code>[String]</code><br>
  Controller to use instead of the default Alchemy::PagesController
* <code>action:</code> <code>[String]</code><br>
  Controllers action to use instead of the default Alchemy::PagesController#show

h4. Example

Lets say you want to create a contact page with a headline element, an e-mail formular and a text element on it.

This page should be unique, because you don't want to give your content manager the possibility to create more than one contact form.

This page must not be cached, because of validation messages and user specific form content.

We also want to autogenerate the headline and the contactform element after the page gets created.

<pre>
# config/alchemy/page_layouts.yml
- name: contact
  cache: false
  unique: true
  elements: [headline, contactform, text]
  autogenerate: [headline, contactform]
</pre>

h3. Generate the views

Every page layout defined in the <code>page_layouts.yml</code> file should have a view partial located in <code>app/views/alchemy/page_layouts/</code>.

There is no need to create these partials manually. Alchemy CMS comes with a Rails generator task which creates these partials for you.

So after defining the page layouts, you can generate all the corresponding partials for them.

<shell>rails g alchemy:page_layouts --skip</shell>

Using the example above, which defines a contact layout, the generator will create a partial named <code>_contact.html.erb</code>.

NOTE: You can pass <code>--template-engine</code> or <code>-e</code> as option to use one of <code>haml</code>, <code>slim</code> and <code>erb</code>.
The default is depending on your default template engine in your Rails host app.

h3. Customize the views

Alchemy does not place any HTML markup in your generated page layouts partial.

So:

<pre>
<%= render_elements %>
</pre>

is all you will see. Feel free to customize the HTML so it fits your needs.

INFO: Alchemy comes with tons of view helpers that you can use to render elements.<br>
Please have a look into the "ElementsHelper documentation":http://rdoc.info/github/magiclabs/alchemy_cms/Alchemy/ElementsHelper#render_elements-instance_method

h3. Translate page layout names

Page layout names are passed through the <code>I18n</code> library.
You can translate them in your Alchemy locale files.

h4. Example

<pre>
# config/locales/alchemy.de.yml
de:
  alchemy:
    page_layout_names:
      contact: Kontakt
      search: Suche
</pre>

INFO: All translation keys used by Alchemy are scoped under the <code>alchemy</code> namespace.

&nbsp;
