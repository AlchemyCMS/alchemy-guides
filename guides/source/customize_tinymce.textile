h2. Customizing the TinyMCE Richtext Editor

This guide explains how to override the default settings of the TinyMCE richtext editor and customize it.
After reading this guide you will be able to:

* Overriding default settings
* Customizing the toolbar
* Changing the default stylesheet

endprologue.



h3. Override the default settings

To override the default settings you have to create a <code>tinymce.rb</code> initializer file into <code>config/initializers</code>.

INFO: Alchemys default settings for TinyMCE can be found in the "documentation":http://rubydoc.info/github/magiclabs/alchemy_cms/Alchemy/Tinymce

h4. A Minimal Editor

Let's reduce the options for formatting the text to a minimum.

Because Alchemy merges the default options and your custom options you just need to pass the options you want to override to <code>Alchemy::Tinymce.init</code>.

<ruby>
# config/initializers/tinymce.rb
Alchemy::Tinymce.init = {
  toolbar: [
    'bold italic underline',
    'pastetext charmap code | undo redo | alchemy_link unlink | alignleft aligncenter alignright alignjustify'
  ]
}
</ruby>

Now only this three basic formatting options are available in the first toolbar to your editors.
In the second toolbar are now the align formatting options available.

NOTE: Overriding options always applies to all richtext editors in all elements in Alchemy.

h3. Custom toolbar buttons

You can customize the TinyMCE toolbar with a lot of buttons. Find them in the "TinyMCE documentation":http://www.tinymce.com/wiki.php/Controls

h4. Adding a format select box

Let's add a format select to our editors so they can insert headlines into their texts.

In the TinyMCE documentation we found our configuration option:

<javascript>
tinymce.init({
  ...
  block_formats: "Paragraph=p;Header 1=h1;Header 2=h2;Header 3=h3"
});
</javascript>

We just have to _convert_ this javacript object into a ruby hash.
And we need to insert the format select into the set of buttons.

<ruby>
# config/initializers/tinymce.rb
Alchemy::Tinymce.init = {
  toolbar: [
    'bold italic underline | strikethrough subscript superscript | numlist bullist indent outdent | removeformat | fullscreen',
    'pastetext | formatselect | charmap code | undo redo | alchemy_link unlink'
  ],
  block_formats: "Header 2=h2;Paragraph=p"
}
</ruby>

That's it. Now the editor can format a block of text as headline 2. Nice!

NOTE: Custom buttons always appear in all richtext editors in all elements in Alchemy.



h3. Setting a custom stylesheet

It is a good practice to set the stylesheet TinyMCE uses to display text in the editor area to the one you use to render the website.

h4. Create a css file

Put a <code>tinymce_content.css</code> stylesheet into your <code>app/assets/stylesheets</code> folder.

INFO: Please read more on custom stylesheets in the "TinyMCE documentation":http://www.tinymce.com/wiki.php/Configuration:content_css

h4. Setting the stylesheet

<javascript>
Alchemy::Tinymce.init = {
  content_css: "/assets/tinymce_content.css"
}
</javascript>

h4. Compile the asset for production

In production mode (on your server) Rails uses compiled assets to speed up the rendering of your page.
As default Rails only compiles the <code>application.css</code> stylesheet. But you can tell Rails to compile our custom TinyMCE stylesheet as well.

Open the <code>config/environments/production.rb</code> file in your editor and insert this line:

<ruby>
config.assets.precompile += %w( tinymce_content.css )
</ruby>

h3. Per element customization

You can also set TinyMCE configuration options per element.

<yaml>
# elements.yml
- name: minimal_text
  contents:
  - name: text
    type: EssenceRichtext
    settings:
      tinymce:
        toolbar:
        - 'bold italic underline',
        - 'pastetext charmap code | undo redo | alchemy_link unlink | alignleft aligncenter alignright alignjustify'
</yaml>

h3. Configuration Syntax

TIP: You can set any "TinyMCE configuration option":http://www.tinymce.com/wiki.php/Configuration. Just remember to _convert_ the javascript syntax into ruby.

h4. Convertions Tips

Javascript and Ruby has very similiar syntax. Especially if you use the new Ruby 1.9 Hash syntax. So converting is no big deal.

h5. Object to Hash

<javascript>{ "key" : "value" } => { key: "value" }</javascript>

h5. Array to Array

Arrays have the same syntax. So you can just take them as they are.

<javascript>["1", "2", "3", "4"] => ["1", "2", "3", "4"]</javascript>

h5. Object with Array as value

<javascript>{ "key" : ["value1", "value2"] } => { key: ["value1", "value2"] }</javascript>

h5. Object with Object as value

<javascript>
{ "key" : { "value" : ["value1", "value2"] } } => { key: { value: ["value1", "value2"] } }
</javascript>

&nbsp;
