h2. Essences

Essences store the actual content of your site.

Alchemy comes with a lot of predefined essences for the regular needs of a website project.
Combine them like a chemestry kit into "elements":elements.html.

Essences are normal Rails models, so it is pretty easy to "add your own":create_essences.html.

endprologue.

h3. Hints, Default Values and Element Titles

When defining elements, you can assign hints and default values to every essence like this:

<yaml>
# config/alchemy/elements.yml
- name: article
    contents:
    - name: headline
      type: EssenceText
      hint: "This is the headline."
    - name: copy
      type: EssenceRichtext
      default: "Lorem ipsum"
      as_element_title: true
</yaml>

* <strong>hint</strong> <code>String</code><br>
  A hint for the user in the admin frontend that describes what the essence is used for. The hint is "translatable":#translations if you provide an I18n translation key instead of a complete sentence. You may also set it to true to default to the I18n key <code>alchemy.content_hints.your-content-name</code>.
* <strong>default</strong> <code>String</code><br>
  The default text to prefill newly created elements. You may also use a symbol to set it to the I18n key <code>alchemy.default_content_texts.your-symbol-name</code>
* <strong>as_element_title</strong> <code>Boolean</code><br>
  For the displayed element title, the first content essence is used. Use this setting to override this behaviour and show other content as element title.

h3. EssenceText

Stores a <code>String</code> (max. 255 Chars.).

Use this for a headline, or a product name. The editor is renderd as a single lined input field. The view output will be sanitized and HTML escaped. So it's XSS save.

h4. Settings

* <code>linkable</code> <code>Boolean</code><br>
  If set to <code>true</code>, the user can link that essence.

h4. Example

<yaml>
- name: button
  type: EssenceText
  settings:
    linkable: true
</yaml>

h3. EssenceRichtext

Used to store long text.

The editor is rendered as a textarea with embedded TinyMCE Editor.

h4. Settings

You can customize the TinyMCE editor of a single element instance.

* <code>tinymce</code>

h4. Example

<yaml>
- name: text
  type: EssenceRichtext
  settings:
    tinymce:
      style_formats:
      - title: 'Subheadline'
        block: 'h3'
</yaml>

NOTE: See the "TinyMCE customization guide":customize_tinymce.html for all available options

h3. EssencePicture

Used to store references to pictures the user assigned through the library.

The editor is rendered as a picture editor with a lot of options (i.e. image cropper).

The view renders the assigned picture, resizes it, crops it and caches the result.

INFO: See the "rendering images":render_images.html guide for further information on the powerful image rendering engine of Alchemy.

h3. EssenceDate

Use this to store a <code>DateTime</code> value. Renders a datepicker in the editor partial.

The view output is passed through Rails' I18n Library, so it is fully localizable.

h3. EssenceHtml

Useful to store HTML code (i.e. a embed, or tracking code).

The view renders the raw, not sanitized or escaped output.

<strong>So be careful!</strong>

h3. EssenceBoolean

Stores a Boolean value in the database. Renders a checkbox in the editor partial.

h3. EssenceSelect

Renders a select box in the editor partial and stores the value as <code>String</code>.

Useful for letting your user select from a limited set of choices.

NOTE: Pretty handy together with the <code>page_selector</code> "helper":http://rubydoc.info/github/AlchemyCMS/alchemy_cms/Alchemy/Admin/EssencesHelper#page_selector-instance_method.

h4. Example

<ruby>
# app/views/alchemy/elements/_my_element_editor.html.erb
...
  el.render :width, :select_values => ["200", "300", "400"]
...
</ruby>

h3. EssenceLink

Stores a url in the database. Useful for linking things, where the user should not set the linked value itself. (Like in the EssenceText with <code>linkable: true</code> option)

INFO: It is easy to add your own essence types to Alchemy.
Read more about it in "this guide":create_essences.html

h3. Configure essences

To configure the settings of an essence you have to pass it into its settings in the <code>elements.yml</code>

h4. Example

<yaml>
- name: my_element
  contents:
  - name: headline
    type: EssenceText
    settings:
    - linkable: true
</yaml>

&nbsp;
